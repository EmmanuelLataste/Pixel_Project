
using UnityEngine;

public class CharacterController : MonoBehaviour {
    public LayerMask groundLayer; // Bien penser à le mettre dans la scène, et à créer un layer groundLayer
    private float horizontal;
    private float vertical;
    public float speed;
    public float jump;
    public Vector3 groundDistance;

    private void Start()
    {
        
    }

    void Update()
    {
        horizontal = Input.GetAxis("Horizontal"); // On stocke les valeurs du joystick gauche dans deux variables ( valeurs entre -1 et 1)
        vertical = Input.GetAxis("Vertical");
        
        Rotation();
        Movements();
        Jump();
       
    }

    void Rotation()
    {

        if (horizontal != 0 || vertical != 0) // Si on utilise le joystick
        {
            transform.rotation = Quaternion.Euler(new Vector3(0, Mathf.Atan2(- vertical, horizontal) * Mathf.Rad2Deg, 0));
           // On donne au player une nouvelle roation à son Y, la formule c'est : ArcTangente(-vertical / horizontal)
           // MathF.Rad2Deg c'est pour mettre la valeur en degrès car sion elle est en radians.
        }
    }

    void Movements()
    {
        if (horizontal != 0 || vertical != 0)
        {
            //GetComponent<Rigidbody>().MovePosition(transform.position + transform.right);

            //GetComponent<Rigidbody>().AddForce(transform.right * speed);
            GetComponent<Rigidbody>().velocity = (new Vector3(horizontal, 0,vertical) * speed);
            // Speed permet d'accelerer le player.
           // transform.Translate(new Vector3(speed, 0, 0));
        }
    }

    void Jump()
    {
        if (isGrounded() == true) // Si la méthode en dessous est vrai, donc si le rayon touche le sol
        {
            if (Input.GetButtonDown("Jump")) // Si on appuit sur Jump
            {
                Debug.Log("Jump");
                GetComponent<Rigidbody>().AddForce(new Vector3(0, jump, 0));
                // Alors on ajout une force sur Y pour sauter.
            }
           
        }

    }
    
    bool isGrounded() // Une méthode renvoyant un booléan.
    {
        
        RaycastHit hit;
        Debug.DrawRay(transform.position, groundDistance, Color.red); // Permet de voir le ray dans la scène lorsque c'est lancé.
        if (Physics.Raycast(transform.position, groundDistance, out hit, 2f, groundLayer))
            // Si un rayon de 2f partant la position du player, allant vers le sol( groundDistance) touche un objet ayant le calque " ground "...
        {
            Debug.Log(hit.transform.name);
            return true; //Alors on renvoit Vrai
            
        }
        return false;
    }
}
